{"version":3,"sources":["reducers/app.js","components/ToggleButton.jsx","components/AddTaskForm.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["APP_ACTIONS","initialAppState","dark_theme","todoList","reducer","state","action","type","theme","todoItem","filter","_id","ToggleButton","app_context","useContext","AppContext","toggleBallStyles","position","width","height","top","left","backgroundColor","borderRadius","transition","style","display","alignItems","onClick","e","dispatchState","marginLeft","background","AddTaskInputForm","useState","name","setName","addInputStyle","margin","border","outline","padding","fontSize","color","onSubmit","preventDefault","axios","post","then","response","data","catch","error","console","log","value","onChange","target","className","TodoItem","props","todoItemStyles","borderTop","borderBottomRightRadius","put","completed","checked","marginRight","TodoList","useEffect","get","map","id","React","createContext","App","useReducer","mainStyles","topStyles","appStyles","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAaA,EACK,eADLA,EAEM,gBAFNA,EAGO,iBAHPA,EAIS,mBASTC,EAAkB,CAC3BC,YAAY,EACZC,SAAU,IAIDC,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOC,MACX,KAAKP,EACD,OAAO,2BACAK,GADP,IAEIH,WAAYI,EAAOE,QAE3B,KAAKR,EACD,OAAO,2BACAK,GADP,IAEIF,SAAUG,EAAOH,WAEzB,KAAKH,EACD,OAAO,2BACAK,GADP,IAEIF,SAAS,GAAD,mBAAME,EAAMF,UAAZ,CAAsBG,EAAOG,aAE7C,KAAKT,EACD,IAAMG,EAAWE,EAAMF,SAASO,QAAO,SAAAD,GAAQ,OAAGA,EAASE,MAAQL,EAAOG,SAASE,OACnF,OAAO,2BACAN,GADP,IAEIF,SAAS,GAAD,mBAAMA,GAAN,CAAgBG,EAAOG,aAEvC,QACI,OAAOR,ICMJW,EA1CM,WAEjB,IAAMC,EAAcC,qBAAWC,GAiBzBC,EAAoB,CACtBC,SAAU,WACVC,MAAO,GACPC,OAAQ,GACRC,IAAK,EACLC,KAAMR,EAAYR,MAAMH,WAAa,GAAK,EAC1CoB,gBAAiBT,EAAYR,MAAMH,WAAa,4BAA8B,eAC9EqB,aAAc,MACdC,WAAY,qBAOhB,OACI,oBAAGC,MA/Bc,CACjBC,QAAS,cACTC,WAAY,UA6BYC,QALL,SAAAC,GACnBhB,EAAYiB,cAAc,CAACvB,KAAMP,EAA0BQ,OAAQK,EAAYR,MAAMH,cAIrF,uBACc,sBAAMuB,MA3BM,CAC1BM,WAAY,GACZd,SAAU,WACVS,QAAS,eACTR,MAAO,GACPC,OAAQ,GACRa,WAAY,qBACZT,aAAc,IAoBA,SAAoC,sBAAME,MAAOT,U,gBCCxDiB,EArCU,WAAO,IAAD,EAEHC,mBAAS,IAFN,mBAEpBC,EAFoB,KAEdC,EAFc,KAIrBvB,EAAcC,qBAAWC,GAEzBsB,EAAgB,CAClBC,OAAQ,YACRnB,OAAQ,GACRoB,OAAQ,OACRC,QAAS,OACTC,QAAS,WACTC,SAAU,GACVxB,MAAO,OACPI,gBAAiBT,EAAYR,MAAMH,WAAa,+BAAiC,eACjFyC,MAAO9B,EAAYR,MAAMH,WAAa,eAAiB,4BAc3D,OACI,sBAAM0C,SAZU,SAAAf,GAEhBA,EAAEgB,iBACF,IAAMpC,EAAW,CAAC0B,KAAMA,GACxBW,IAAMC,KAAK,cAAetC,GACzBuC,MAAK,SAAAC,GAAQ,OAAGpC,EAAYiB,cAAc,CAACvB,KAAMP,EAA2BS,SAAUwC,EAASC,UAC/FC,OAAM,SAAAC,GAAK,OAAGC,QAAQC,IAAIF,EAAMH,aAEjCb,EAAQ,KAIR,SACI,uBAAOmB,MAAOpB,EAAMqB,SAAU,SAAA3B,GAAC,OAAGO,EAAQP,EAAE4B,OAAOF,QAAQG,UAAU,SAASjC,MAAOY,EAAe9B,KAAK,YCkBtGoD,G,MAjDE,SAAAC,GAEb,IAAM/C,EAAcC,qBAAWC,GAEzB8C,EAAiB,CACnBrC,WAAY,uBACZN,MAAO,OACPoB,OAAQ,YACRG,QAAS,OACTqB,UAAW,8BACXC,wBAAyB,GACzBzC,gBAAiBT,EAAYR,MAAMH,WAAa,+BAAiC,6BA0BrF,OACI,qBAAKwD,UAAU,SAASjC,MAAOoC,EAA/B,SACI,oBAAGpC,MAzBO,CACdiB,SAAU,IAwBN,UAAqB,uBAAOc,SAdjB,SAAA3B,GAMfiB,IAAMkB,IAAN,qBAAwBJ,EAAMjD,KAAO,CAACsD,WAAYL,EAAMK,YACvDjB,MAAK,SAAAC,GAAQ,OAAGpC,EAAYiB,cAAc,CAACvB,KAAMP,EAA8BS,SAAUwC,EAASC,UAClGC,OAAM,SAAAC,GAAK,OAAGC,QAAQC,IAAIF,EAAMH,cAMqBiB,QAASN,EAAMK,UAAWxC,MArB9D,CAClBP,MAAO,GACPC,OAAQ,GACRgD,YAAa,IAkByF5D,KAAK,aAE/FqD,EAAMK,UAAa,iCAASL,EAAMzB,OAAkByB,EAAMzB,YCT/DiC,EA/BE,WAEb,IAAMvD,EAAcC,qBAAWC,GAE/BsC,QAAQC,IAAI,YAAYzC,EAAYR,MAAMF,SAAS,IAenD,OANAkE,qBAAU,WACNvB,IAAMwB,IAAI,eACLtB,MAAK,SAAAC,GAAQ,OAAGpC,EAAYiB,cAAc,CAACvB,KAAMP,EAA4BG,SAAS8C,EAASC,UAC/FC,OAAM,SAAAC,GAAK,OAAGC,QAAQC,IAAIF,EAAMH,eACtC,IAGC,qBAAKxB,MAdc,GAcnB,SAEQZ,EAAYR,MAAMF,SAASoE,KAAI,SAAA9D,GAAQ,OACnC,cAAC,EAAD,eAAgCA,GAAjBA,EAAS+D,UCrB/BzD,EAAa0D,IAAMC,gBAuCjBC,EArCH,WAAO,IAAD,EAEeC,qBAAWxE,EAASH,GAFnC,mBAETI,EAFS,KAEFyB,EAFE,KAKV+C,EAAa,CACjBvD,gBAAiBjB,EAAMH,WAAa,wBAA0B,mBAG1D4E,EAAY,CAChBxD,gBAAiBjB,EAAMH,WAAa,4BAA8B,6BAG9D6E,EAAY,CAChBpC,MAAOtC,EAAMH,WAAa,eAAiB,4BAG7C,OACE,qBAAKuB,MAAOoD,EAAYL,GAAG,OAA3B,SACE,eAACzD,EAAWiE,SAAZ,CAAqBzB,MAAO,CAAClD,MAAOA,EAAOyB,cAAeA,GAA1D,UACE,qBAAKL,MAAOqD,EAAWpB,UAAU,gBACjC,sBAAKjC,MAAOsD,EAAWrB,UAAU,MAAjC,UACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,gDACA,uEAEF,cAAC,EAAD,OAEF,cAAC,EAAD,IACA,cAAC,EAAD,aC9BKuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a6fd834c.chunk.js","sourcesContent":["export const APP_ACTIONS = {\n    TOGGLE_THEME: \"TOGGLE_THEME\",\n    ADD_TODO_ITEM: \"ADD_TODO_ITEM\",\n    GET_TODO_ITEMS: \"GET_TODO_ITEMS\",\n    UPDATE_TODO_ITEM: \"UPDATE_TODO_ITEM\"\n}\n\n\nexport const THEME = {\n    DARK: 0,\n    LIGHT: 1\n}\n\nexport const initialAppState = {\n    dark_theme: false,\n    todoList: []\n}\n\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case APP_ACTIONS.TOGGLE_THEME:\n            return {\n                ...state,\n                dark_theme: action.theme\n            }\n        case APP_ACTIONS.GET_TODO_ITEMS:\n            return {\n                ...state,\n                todoList: action.todoList\n            }\n        case APP_ACTIONS.ADD_TODO_ITEM:\n            return {\n                ...state,\n                todoList: [...state.todoList, action.todoItem]\n            }\n        case APP_ACTIONS.UPDATE_TODO_ITEM:\n            const todoList = state.todoList.filter(todoItem=> todoItem._id !== action.todoItem._id);\n            return {\n                ...state,\n                todoList: [...todoList, action.todoItem]\n            }\n        default:\n            return initialAppState;\n    }\n}","import React, { useContext } from 'react';\n\nimport {AppContext} from '../App';\n\nimport {APP_ACTIONS} from '../reducers/app';\n\n\nconst ToggleButton = () => {\n\n    const app_context = useContext(AppContext)\n\n    const toggleStyles = {\n        display: \"inline-flex\",\n        alignItems: \"center\"\n    }\n\n    const toggleContainerStyles = {\n        marginLeft: 15,\n        position: \"relative\",\n        display: \"inline-block\",\n        width: 65,\n        height: 30,\n        background: \"var(--toggle-dark)\",\n        borderRadius: 15,\n    }\n\n    const toggleBallStyles =  {\n        position: \"absolute\",\n        width: 26,\n        height: 26,\n        top: 2,\n        left: app_context.state.dark_theme ? 36 : 4,\n        backgroundColor: app_context.state.dark_theme ? \"var(--very-dark-blue-top)\" : \"var(--white)\",\n        borderRadius: \"50%\",\n        transition: \"all 0.2s ease-out\"\n      }\n\n    const toggleDarkMode = e => {\n        app_context.dispatchState({type: APP_ACTIONS.TOGGLE_THEME, theme: !app_context.state.dark_theme })\n    }\n\n    return (\n        <p style={toggleStyles} onClick={toggleDarkMode}>\n            Dark Mode <span style={toggleContainerStyles}><span style={toggleBallStyles}></span></span>\n        </p>\n    )\n}\n\n\nexport default ToggleButton;","import React, {useContext, useState} from 'react';\nimport axios from 'axios';\n\nimport { AppContext } from '../App';\nimport {APP_ACTIONS} from '../reducers/app';\n\n\nconst AddTaskInputForm = () => {\n\n    const [name, setName] = useState(\"\");\n\n    const app_context = useContext(AppContext);\n\n    const addInputStyle = {\n        margin: \"6rem 0rem\",\n        height: 55,\n        border: \"none\",\n        outline: \"none\",\n        padding: \"5px 12px\",\n        fontSize: 24,\n        width: \"100%\",\n        backgroundColor: app_context.state.dark_theme ? \"var(--dark-desaturated-blue)\" : \"var(--white)\",\n        color: app_context.state.dark_theme ? \"var(--white)\" : \"var(--dark-grayish-blue)\"\n    }\n\n    const addTodoItem = e => {\n        // TODO: Make api call to my backend to save todo and add the returned data to the todoList (app)\n        e.preventDefault();\n        const todoItem = {name: name}\n        axios.post('/api/tasks/', todoItem)\n        .then(response=> app_context.dispatchState({type: APP_ACTIONS.ADD_TODO_ITEM, todoItem: response.data}))\n        .catch(error=> console.log(error.response))\n        \n        setName(\"\")\n    }\n\n    return (\n        <form onSubmit={addTodoItem}>\n            <input value={name} onChange={e=> setName(e.target.value)} className=\"shadow\" style={addInputStyle} type=\"text\" />\n        </form>\n    )\n}\n\n\nexport default AddTaskInputForm;","import React, {useContext, useState} from 'react';\nimport axios from 'axios';\n\nimport {APP_ACTIONS } from '../reducers/app';\nimport { AppContext } from '../App';\n\n\nconst TodoItem = props => {\n\n    const app_context = useContext(AppContext);\n\n    const todoItemStyles = {\n        transition: \"all 0.2s ease-in-out\",\n        width: \"100%\",\n        margin: \"25px auto\",\n        padding: \"2rem\",\n        borderTop: \"5px solid var(--border-top)\",\n        borderBottomRightRadius: 40,\n        backgroundColor: app_context.state.dark_theme ? \"var(--dark-desaturated-blue)\" : \"var(--light-grayish-blue)\",\n    }\n\n    const taskStyle = {\n        fontSize: 24\n    }\n\n    const checkBoxStyle = {\n        width: 20,\n        height: 20,\n        marginRight: 35\n    }\n\n\n    const updateTodo = e => {\n        /**\n         * TODO:\n         *      1. Make an api call to update the todoItem.\n         *          - change completed to given value\n         */\n        axios.put(`/api/tasks/${props._id}`, {completed: !props.completed})\n        .then(response=> app_context.dispatchState({type: APP_ACTIONS.UPDATE_TODO_ITEM, todoItem: response.data}))\n        .catch(error=> console.log(error.response))\n    }\n\n\n    return (\n        <div className=\"shadow\" style={todoItemStyles}>\n            <p style={taskStyle}><input onChange={updateTodo} checked={props.completed} style={checkBoxStyle} type=\"checkbox\" /> \n                {\n                    props.completed ? (<strike>{props.name}</strike>) : props.name\n                } \n            </p>\n        </div>\n    )\n}\n\n\nexport default TodoItem;","import React, {useContext, useEffect} from 'react';\nimport axios from 'axios';\n\nimport { AppContext } from '../App';\nimport { APP_ACTIONS } from '../reducers/app';\nimport TodoItem from './TodoItem';\n\n\nconst TodoList = () => {\n\n    const app_context = useContext(AppContext);\n\n    console.log(\"An item: \",app_context.state.todoList[0])\n\n    const todoListStyles = {\n    }\n\n    /* TODO:    1. Implement a useEffect to fetch all the todoItems from the backend\n                2. Save the response data (todoList) from the backend as a global state\n    **/\n\n    useEffect(()=> {\n        axios.get('/api/tasks/')\n            .then(response=> app_context.dispatchState({type: APP_ACTIONS.GET_TODO_ITEMS, todoList:response.data}))\n            .catch(error=> console.log(error.response))\n    }, [])\n\n    return (\n        <div style={todoListStyles}>\n            {\n                app_context.state.todoList.map(todoItem=> (\n                    <TodoItem key={todoItem.id} {...todoItem} />\n                ))\n            }\n        </div>\n    )\n}\n\n\nexport default TodoList;","import React, {useReducer} from 'react';\n\nimport {reducer, initialAppState} from './reducers/app';\nimport ToggleButton from './components/ToggleButton';\nimport AddTaskInputForm from './components/AddTaskForm';\n\nimport './App.css';\nimport TodoList from './components/TodoList';\n\n\nexport const AppContext = React.createContext();\n\nconst App = () => {\n\n  const [state, dispatchState] = useReducer(reducer, initialAppState);\n\n\n  const mainStyles = {\n    backgroundColor: state.dark_theme ? \"var(--very-dark-blue)\" : \"var(--white-bg)\"\n  }\n\n  const topStyles = {\n    backgroundColor: state.dark_theme ? \"var(--very-dark-blue-top)\" : \"var(--very-pale-blue-top)\"\n  }\n\n  const appStyles = {\n    color: state.dark_theme ? \"var(--white)\" : \"var(--dark-grayish-blue)\"\n  }\n\n  return (\n    <div style={mainStyles} id=\"main\">\n      <AppContext.Provider value={{state: state, dispatchState: dispatchState}}>\n        <div style={topStyles} className=\"top-pattern\"></div>\n        <div style={appStyles} className=\"app\">\n          <div className=\"top\">\n            <div className=\"left\">\n              <h1>Kali Todo List</h1>\n              <span>Create tasks and complete easily</span>\n            </div>\n            <ToggleButton />\n          </div> \n          <AddTaskInputForm />\n          <TodoList />\n        </div>\n      </AppContext.Provider>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}